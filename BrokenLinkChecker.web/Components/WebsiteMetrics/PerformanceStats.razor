    @using BrokenLinkChecker.models
    @using Microsoft.AspNetCore.Components.QuickGrid
    @using BrokenLinkChecker.web.Components.Search
@using Microsoft.AspNetCore.Mvc.RazorPages

    @rendermode InteractiveServer

    <h3>Performance Stats</h3>

    @if (VisitedPages.Count > 0)
    {
        <p>Average page speed: @GetAveragePageSpeed() ms</p>
        
        <QuickGrid Items="@VisitedPages.AsQueryable()" Pagination="pagination">
            <PropertyColumn Property="@(page => page.Url)" Sortable="true" />
            <PropertyColumn Property="@(page => page.StatusCode)" Sortable="true" Title="Status Code"/>
            <PropertyColumn Property="@(page => page.ResponseTime)" Sortable="true" Title="TTFB"/>
            <PropertyColumn Property="@(page => page.DocumentParseTime)" Sortable="true" Title="Document Parse Time"/>
            <PropertyColumn Property="@(page => page.CombinedTime)" Sortable="true" Title="Total Time"/>
            <PropertyColumn Property="@(page => page.HttpVersion)" Sortable="true" Title="Http Version" />
        </QuickGrid>
        
        <Paginator State="pagination" />
    }


    @code {
        [Parameter]
        public ICollection<PageStats> VisitedPages { get; set; }

        
        PaginationState pagination = new PaginationState { ItemsPerPage = 20 };


        private long GetAveragePageSpeed()
        {
            if (VisitedPages.Count == 0)
            {
                return 0;
            }

            long totalResponseTime = VisitedPages.Sum(page => page.CombinedTime);
            return totalResponseTime / VisitedPages.Count();
        }

    }