@page "/website-analyser"
@using BrokenLinkChecker.crawler
@using BrokenLinkChecker.models
@using BrokenLinkChecker.web.Components.WebsiteMetrics
@using BrokenLinkChecker.web.Components.WebsiteInputs
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h2>Website Analyser</h2>

<WebsiteInput UriHasChanged="@CheckBrokenLinks"></WebsiteInput>

<div class="concurrency-input">
    <label for="concurrencyInput" class="margin-bottom-m center-text">Concurrent Requests:</label>
    <input type="number" id="concurrencyInput" @bind="_concurrentRequests" @oninput="ApplyConcurrentRequestsChange" required class="margin-bottom-m" min="1" max="100"/>
    <p>Concurrency:  @_concurrentRequests</p>
</div>

@if (IsChecking)
{
    <p>Crawling website, please wait...</p>
    <p>Links enqueued: @_linksEnqueued</p>
}

@if (_linksChecked > 0)
{
    <p>Links checked: @_linksChecked</p>
    
    <div class="padding-m round-corners box-shadow">
        <h2>Website metrics</h2>

        <StateButtons PageStateChanged="ChangePageState" />

        @switch (_currentStatus)
        {
            case PageStatState.DisplayPerformance:
                <PerformanceStats VisitedPages="@VisitedPages.AsQueryable()"/>
                break;
            case PageStatState.DisplayBrokenLinks:
                <BrokenLinksStats BrokenLinks="@BrokenLinks"/>
                break;
            case PageStatState.DisplayHeaders:
                <PageHeaders VisitedPages="@VisitedPages" />
                break;
            case PageStatState.Error:
                <p>Error encountered during the process. Please try again.</p>
                break;
        }
    </div>
}

@code {
    public ICollection<BrokenLink> BrokenLinks { get; set; } = [];
    public ICollection<PageStats> VisitedPages { get; set; } = [];
    
    private bool IsChecking { get; set; }

    private int _linksChecked;
    private int _linksEnqueued;
    private int _concurrentRequests = 1;

    private PageStatState _currentStatus = PageStatState.DisplayBrokenLinks;

    private async Task CheckBrokenLinks(Uri url)
    {
        IsChecking = true;
        BrokenLinks = new List<BrokenLink>();

        CrawlerConfig crawlerState = new CrawlerConfig(_concurrentRequests);
        Crawler crawler = new Crawler(HttpClient, crawlerState)
        {
            OnLinksEnqueued = (count) =>
            {
                _linksEnqueued = count;
                InvokeAsync(StateHasChanged);
            },
            OnLinksChecked = (count) =>
            {
                _linksChecked = count;
                InvokeAsync(StateHasChanged);
            },
            OnBrokenLinks = (links) =>
            {
                BrokenLinks = links;
                InvokeAsync(StateHasChanged);
            },
            OnPageVisited = (links) =>
            {
                VisitedPages = links;
                InvokeAsync(StateHasChanged);
            }
        };

        VisitedPages = await crawler.CrawlWebsiteAsync(url);
        IsChecking = false;
    }
    
    private void ChangePageState(PageStatState newState)
    {
        _currentStatus = newState;
    }
    
    private void ApplyConcurrentRequestsChange(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out int newConcurrentRequests))
        {
            return;
        }
        
        if (newConcurrentRequests < 1)
        {
            _concurrentRequests = 1;
        }
        else if (newConcurrentRequests > 100)
        {
            _concurrentRequests = 100;
        }
        else
        {
            _concurrentRequests = newConcurrentRequests;
        }
    }

}