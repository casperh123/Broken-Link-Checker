@page "/check-links"
@using System.Runtime.InteropServices
@using BrokenLinkChecker.crawler
@using BrokenLinkChecker.models
@using BrokenLinkChecker.utility
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h3>Broken Link Checker @clickcount</h3>

<div>
    <label for="urlInput">Enter URL:</label>
    <input id="urlInput" @bind="TargetUrl" />
    <button @onclick="CheckBrokenLinks">Check Links</button>
</div>

@if (IsChecking)
{
    <p>Checking links, please wait...</p>
    <p>Links enqueued: @linksEnqueued</p>
    <p>Links checked: @linksChecked</p>
}

@if (BrokenLinks.Count > 0)
{
    <h4>Broken Links:</h4>
    <table>
        <thead>
        <tr>
            <th>URL</th>
            <th>Referring Page</th>
            <th>Anchor Text</th>
            <th>Line</th>
            <th>Status Code</th>
            <th>Error Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var link in BrokenLinks)
        {
        <tr>
            <td>@link.Url</td>
            <td>@link.ReferringPage</td>
            <td>@link.AnchorText</td>
            <td>@link.Line</td>
            <td>@link.StatusCode</td>
            <td>@link.ErrorMessage</td>
        </tr>
        }
        </tbody>
    </table>
}

@code {
    private string TargetUrl { get; set; }
    private List<BrokenLink> BrokenLinks { get; set; } = new List<BrokenLink>();
    private bool IsChecking { get; set; } = false;

    private int linksChecked;
    private int linksEnqueued;

    private int clickcount;

    private async Task CheckBrokenLinks()
    {
        clickcount++;
        Console.WriteLine("CheckBrokenLinks method started.");
        IsChecking = true;
        BrokenLinks.Clear();

        var crawlerState = new CrawlerState(12);
        var crawler = new Crawler(HttpClient, crawlerState);
        
        // Subscribe to the OnLinksEnqueued and OnLinksChecked delegates
        crawler.OnLinksEnqueued = (count) =>
        {
            linksEnqueued = count;
            InvokeAsync(StateHasChanged); // Notify the Blazor component to update UI
        };
        crawler.OnLinksChecked = (count) =>
        {
            linksChecked = count;
            InvokeAsync(StateHasChanged); // Notify the Blazor component to update UI
        };

        try
        {
            Console.WriteLine($"Starting crawler for URL: {TargetUrl}");
            await crawler.GetBrokenLinksAsync(TargetUrl);
            Console.WriteLine("Crawler finished.");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Exception occurred: {e.Message}");
            throw;
        }

        linksChecked = crawler.LinksChecked;
        linksEnqueued = crawler.LinksEnqueued;
        BrokenLinks = crawlerState.BrokenLinks;

        IsChecking = false;
        Console.WriteLine("CheckBrokenLinks method completed.");
    }
}
