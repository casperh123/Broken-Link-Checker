@page "/check-links"
@using BrokenLinkChecker.crawler
@using BrokenLinkChecker.models
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h3>Broken Link Checker</h3>

<div>
    <label for="urlInput">Enter URL:</label>
    <input id="urlInput" @bind="TargetUrl" />
    <button @onclick="CheckBrokenLinks">Check Links</button>
</div>

@if (IsChecking)
{
    <p>Checking links, please wait...</p>
    <p>Links enqueued: @_linksEnqueued</p>
    <p>Links checked: @_linksChecked</p>
}

@if (BrokenLinks.Count > 0)
{
    <h4>Broken Links:</h4>
    <table>
        <thead>
        <tr>
            <th>URL</th>
            <th>Referring Page</th>
            <th>Anchor Text</th>
            <th>Line</th>
            <th>Status Code</th>
            <th>Error Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (BrokenLink link in BrokenLinks)
        {
            <tr>
                <td><a href="@link.Url">@link.Url</a></td>
                <td><a href="@link.ReferringPage">@link.ReferringPage</a></td>
                <td>@link.AnchorText</td>
                <td>@link.Line</td>
                <td>@link.StatusCode</td>
                <td>@link.ErrorMessage</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private string TargetUrl { get; set; }
    private List<BrokenLink> BrokenLinks { get; set; } = new List<BrokenLink>();
    private bool IsChecking { get; set; } = false;

    private int _linksChecked;
    private int _linksEnqueued;

    private async Task CheckBrokenLinks()
    {
        IsChecking = true;
        BrokenLinks.Clear();

        CrawlerConfig crawlerState = new CrawlerConfig(4);
        Crawler crawler = new Crawler(HttpClient, crawlerState)
        {
            OnLinksEnqueued = (count) =>
            {
                _linksEnqueued = count;
                InvokeAsync(StateHasChanged);
            },
            OnLinksChecked = (count) =>
            {
                _linksChecked = count;
                InvokeAsync(StateHasChanged);
            },
            OnBrokenLinks = (links) =>
            {
                BrokenLinks = links;
                InvokeAsync(StateHasChanged);
            }
        };
        
        await crawler.GetBrokenLinksAsync(new Uri(TargetUrl));
        
        IsChecking = false;
    }
}